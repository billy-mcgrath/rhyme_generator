This project explores a few different ways that we can create rhyming couplets using sentences from articles appearing daily in The Dartmouth. The first sentences of the couplets are real sentences that appeared in articles that day (or the preceding few days). The second sentences are generated by the computer using different techniques including POS tagging and bigram dictionaries that are trained on the text from a bunch of articles from all sections of The D. Doing it this way does not always produce perfect couplets, but keeping the first lines real often preserves a sense of the news. Also by offering up a few different ways to generate couplets, it offers viewers an insight into the generation process.

The three generation styles:
1. Part of speech + syllable + rhyme
The function reads in a sentence and parses its grammar. The function then generates a new sentence following the same grammar, randomly picking words from the Part of Speech dictionary. The last words of each sentence always rhyme. The function also keeps repeating this process until it builds a sentence that is the same syllable length as the inputted sentence.

2. Length of sentence + rhyme
This function reads in a sentence and generates a list of rhyming words for the last word in the sentence. It then searches through the texts of every article that was used for training and finds sentences with those rhyming words in them. Working backwards, it then takes the phrase directly preceding the rhyming word, using the length of the first sentence to determine how long the phrase is. This is then outputted as the second sentence of the couplet.

3. Part of speech + bigrams + rhyme
This function uses a bigram dictionary, POS dictionary, and a dictionary that maps words to there possible part of speech. It uses the same process as the first method to build sentences based on the grammar of the first sentence. This time, however, it tries to use words from the bigram dictionary so that the sentences flow in a topically related way. Sometime this works, sometimes it doesnâ€™t.


The executable code is in the final_project_mcgrath.py file


Rhyming was done with the help of the rhyming library found here:
https://github.com/fathat/pyrhyme